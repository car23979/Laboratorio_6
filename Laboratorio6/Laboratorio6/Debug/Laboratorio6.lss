
Laboratorio6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000029e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000324  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c9c  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070a  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bb  00000000  00000000  0000174a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001b08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f0  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f0  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  78:	0c 94 4d 01 	jmp	0x29a	; 0x29a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <UART_Init>:
unsigned char UART_Receive(void);
void show_on_leds(unsigned char value);

// Inicialización UART
void UART_Init(unsigned int ubrr) {
	UBRR0H = (unsigned char)(ubrr >> 8);
  80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
  84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1 << TXEN0) | (1 << RXEN0);
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  8e:	86 e0       	ldi	r24, 0x06	; 6
  90:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  94:	08 95       	ret

00000096 <UART_Transmit>:
}

// Transmitir un carácter
void UART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));
  96:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  9a:	95 ff       	sbrs	r25, 5
  9c:	fc cf       	rjmp	.-8      	; 0x96 <UART_Transmit>
	UDR0 = data;
  9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a2:	08 95       	ret

000000a4 <UART_Receive>:
}

// Recibir un carácter
unsigned char UART_Receive(void) {
	while (!(UCSR0A & (1 << RXC0)));
  a4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  a8:	88 23       	and	r24, r24
  aa:	e4 f7       	brge	.-8      	; 0xa4 <UART_Receive>
	return UDR0;
  ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  b0:	08 95       	ret

000000b2 <show_on_leds>:

// Mostrar valor en LEDs (B0-B5 y D6-D7)
void show_on_leds(unsigned char value) {
	PORTB = value & LED_PORTB_MASK;
  b2:	98 2f       	mov	r25, r24
  b4:	9f 73       	andi	r25, 0x3F	; 63
  b6:	95 b9       	out	0x05, r25	; 5
	PORTD = (PORTD & ~LED_PORTD_MASK) | (value & LED_PORTD_MASK);
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	9f 73       	andi	r25, 0x3F	; 63
  bc:	80 7c       	andi	r24, 0xC0	; 192
  be:	89 2b       	or	r24, r25
  c0:	8b b9       	out	0x0b, r24	; 11
  c2:	08 95       	ret

000000c4 <main>:
}

int main(void) {
	// Inicializar UART
	UART_Init(MYUBRR);
  c4:	87 e6       	ldi	r24, 0x67	; 103
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 40 00 	call	0x80	; 0x80 <UART_Init>
	
	// Configurar LEDs
	DDRB = LED_PORTB_MASK;
  cc:	8f e3       	ldi	r24, 0x3F	; 63
  ce:	84 b9       	out	0x04, r24	; 4
	DDRD |= LED_PORTD_MASK;
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	80 6c       	ori	r24, 0xC0	; 192
  d4:	8a b9       	out	0x0a, r24	; 10
	
	// Variable para controlar el modo
	unsigned char mode = 0; // 0 = Parte 1 (Transmisión), 1 = Parte 2 (Recepción)
	
	// Contador para la Parte 1
	unsigned char counter = 0;
  d6:	c0 e0       	ldi	r28, 0x00	; 0
	// Configurar LEDs
	DDRB = LED_PORTB_MASK;
	DDRD |= LED_PORTD_MASK;
	
	// Variable para controlar el modo
	unsigned char mode = 0; // 0 = Parte 1 (Transmisión), 1 = Parte 2 (Recepción)
  d8:	d0 e0       	ldi	r29, 0x00	; 0
	
	// Contador para la Parte 1
	unsigned char counter = 0;
	
	while(1) {
		if (mode == 0) {
  da:	d1 11       	cpse	r29, r1
  dc:	76 c0       	rjmp	.+236    	; 0x1ca <main+0x106>
			// Parte 1: Transmitir carácter y mostrar en LEDs
			UART_Transmit('A' + (counter % 26)); // Envía letras de la A a la Z
  de:	8f e4       	ldi	r24, 0x4F	; 79
  e0:	c8 9f       	mul	r28, r24
  e2:	81 2d       	mov	r24, r1
  e4:	11 24       	eor	r1, r1
  e6:	86 95       	lsr	r24
  e8:	86 95       	lsr	r24
  ea:	86 95       	lsr	r24
  ec:	9c 2f       	mov	r25, r28
  ee:	2a e1       	ldi	r18, 0x1A	; 26
  f0:	82 9f       	mul	r24, r18
  f2:	90 19       	sub	r25, r0
  f4:	11 24       	eor	r1, r1
  f6:	89 2f       	mov	r24, r25
  f8:	8f 5b       	subi	r24, 0xBF	; 191
  fa:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
			
			show_on_leds(counter);
  fe:	8c 2f       	mov	r24, r28
 100:	0e 94 59 00 	call	0xb2	; 0xb2 <show_on_leds>
			counter++;
 104:	cf 5f       	subi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	89 e6       	ldi	r24, 0x69	; 105
 10a:	98 e1       	ldi	r25, 0x18	; 24
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <main+0x48>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x52>
 116:	00 00       	nop
			
			_delay_ms(500);
			
			// Verificar si se recibió un carácter para cambiar de modo
			if (UCSR0A & (1 << RXC0)) {
 118:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 11c:	88 23       	and	r24, r24
 11e:	ec f6       	brge	.-70     	; 0xda <main+0x16>
				UART_Receive(); // Limpiar buffer
 120:	0e 94 52 00 	call	0xa4	; 0xa4 <UART_Receive>
				mode = 1; // Cambiar a modo recepción
				UART_Transmit('\n'); // Nueva línea
 124:	8a e0       	ldi	r24, 0x0A	; 10
 126:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
				UART_Transmit('S'); UART_Transmit('w'); UART_Transmit('i');
 12a:	83 e5       	ldi	r24, 0x53	; 83
 12c:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 130:	87 e7       	ldi	r24, 0x77	; 119
 132:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 136:	89 e6       	ldi	r24, 0x69	; 105
 138:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
				UART_Transmit('t'); UART_Transmit('c'); UART_Transmit('h');
 13c:	84 e7       	ldi	r24, 0x74	; 116
 13e:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 142:	83 e6       	ldi	r24, 0x63	; 99
 144:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 148:	88 e6       	ldi	r24, 0x68	; 104
 14a:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
				UART_Transmit('i'); UART_Transmit('n'); UART_Transmit('g');
 14e:	89 e6       	ldi	r24, 0x69	; 105
 150:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 154:	8e e6       	ldi	r24, 0x6E	; 110
 156:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 15a:	87 e6       	ldi	r24, 0x67	; 103
 15c:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
				UART_Transmit(' '); UART_Transmit('t'); UART_Transmit('o');
 160:	80 e2       	ldi	r24, 0x20	; 32
 162:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 166:	84 e7       	ldi	r24, 0x74	; 116
 168:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 16c:	8f e6       	ldi	r24, 0x6F	; 111
 16e:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
				UART_Transmit(' '); UART_Transmit('R'); UART_Transmit('e');
 172:	80 e2       	ldi	r24, 0x20	; 32
 174:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 178:	82 e5       	ldi	r24, 0x52	; 82
 17a:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 17e:	85 e6       	ldi	r24, 0x65	; 101
 180:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
				UART_Transmit('c'); UART_Transmit('e'); UART_Transmit('i');
 184:	83 e6       	ldi	r24, 0x63	; 99
 186:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 18a:	85 e6       	ldi	r24, 0x65	; 101
 18c:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 190:	89 e6       	ldi	r24, 0x69	; 105
 192:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
				UART_Transmit('v'); UART_Transmit('e'); UART_Transmit(' ');
 196:	86 e7       	ldi	r24, 0x76	; 118
 198:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 19c:	85 e6       	ldi	r24, 0x65	; 101
 19e:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 1a2:	80 e2       	ldi	r24, 0x20	; 32
 1a4:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
				UART_Transmit('M'); UART_Transmit('o'); UART_Transmit('d');
 1a8:	8d e4       	ldi	r24, 0x4D	; 77
 1aa:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 1ae:	8f e6       	ldi	r24, 0x6F	; 111
 1b0:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 1b4:	84 e6       	ldi	r24, 0x64	; 100
 1b6:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
				UART_Transmit('e'); UART_Transmit('\n');
 1ba:	85 e6       	ldi	r24, 0x65	; 101
 1bc:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 1c0:	8a e0       	ldi	r24, 0x0A	; 10
 1c2:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
			_delay_ms(500);
			
			// Verificar si se recibió un carácter para cambiar de modo
			if (UCSR0A & (1 << RXC0)) {
				UART_Receive(); // Limpiar buffer
				mode = 1; // Cambiar a modo recepción
 1c6:	d1 e0       	ldi	r29, 0x01	; 1
 1c8:	88 cf       	rjmp	.-240    	; 0xda <main+0x16>
				UART_Transmit('M'); UART_Transmit('o'); UART_Transmit('d');
				UART_Transmit('e'); UART_Transmit('\n');
			}
			} else {
			// Parte 2: Recibir carácter y mostrar en LEDs
			if (UCSR0A & (1 << RXC0)) {
 1ca:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1ce:	88 23       	and	r24, r24
 1d0:	0c f0       	brlt	.+2      	; 0x1d4 <main+0x110>
 1d2:	83 cf       	rjmp	.-250    	; 0xda <main+0x16>
				unsigned char received = UART_Receive();
 1d4:	0e 94 52 00 	call	0xa4	; 0xa4 <UART_Receive>
 1d8:	18 2f       	mov	r17, r24
				show_on_leds(received);
 1da:	0e 94 59 00 	call	0xb2	; 0xb2 <show_on_leds>
				UART_Transmit(received); // Eco
 1de:	81 2f       	mov	r24, r17
 1e0:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
				
				// Si se recibe 'T' cambiar a modo transmisión
				if (received == 'T' || received == 't') {
 1e4:	14 35       	cpi	r17, 0x54	; 84
 1e6:	19 f0       	breq	.+6      	; 0x1ee <main+0x12a>
 1e8:	14 37       	cpi	r17, 0x74	; 116
 1ea:	09 f0       	breq	.+2      	; 0x1ee <main+0x12a>
 1ec:	76 cf       	rjmp	.-276    	; 0xda <main+0x16>
					mode = 0;
					UART_Transmit('\n'); // Nueva línea
 1ee:	8a e0       	ldi	r24, 0x0A	; 10
 1f0:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
					UART_Transmit('S'); UART_Transmit('w'); UART_Transmit('i');
 1f4:	83 e5       	ldi	r24, 0x53	; 83
 1f6:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 1fa:	87 e7       	ldi	r24, 0x77	; 119
 1fc:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 200:	89 e6       	ldi	r24, 0x69	; 105
 202:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
					UART_Transmit('t'); UART_Transmit('c'); UART_Transmit('h');
 206:	84 e7       	ldi	r24, 0x74	; 116
 208:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 20c:	83 e6       	ldi	r24, 0x63	; 99
 20e:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 212:	88 e6       	ldi	r24, 0x68	; 104
 214:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
					UART_Transmit('i'); UART_Transmit('n'); UART_Transmit('g');
 218:	89 e6       	ldi	r24, 0x69	; 105
 21a:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 21e:	8e e6       	ldi	r24, 0x6E	; 110
 220:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 224:	87 e6       	ldi	r24, 0x67	; 103
 226:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
					UART_Transmit(' '); UART_Transmit('t'); UART_Transmit('o');
 22a:	80 e2       	ldi	r24, 0x20	; 32
 22c:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 230:	84 e7       	ldi	r24, 0x74	; 116
 232:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 236:	8f e6       	ldi	r24, 0x6F	; 111
 238:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
					UART_Transmit(' '); UART_Transmit('T'); UART_Transmit('r');
 23c:	80 e2       	ldi	r24, 0x20	; 32
 23e:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 242:	84 e5       	ldi	r24, 0x54	; 84
 244:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 248:	82 e7       	ldi	r24, 0x72	; 114
 24a:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
					UART_Transmit('a'); UART_Transmit('n'); UART_Transmit('s');
 24e:	81 e6       	ldi	r24, 0x61	; 97
 250:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 254:	8e e6       	ldi	r24, 0x6E	; 110
 256:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 25a:	83 e7       	ldi	r24, 0x73	; 115
 25c:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
					UART_Transmit('m'); UART_Transmit('i'); UART_Transmit('t');
 260:	8d e6       	ldi	r24, 0x6D	; 109
 262:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 266:	89 e6       	ldi	r24, 0x69	; 105
 268:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 26c:	84 e7       	ldi	r24, 0x74	; 116
 26e:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
					UART_Transmit(' '); UART_Transmit('M'); UART_Transmit('o');
 272:	80 e2       	ldi	r24, 0x20	; 32
 274:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 278:	8d e4       	ldi	r24, 0x4D	; 77
 27a:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 27e:	8f e6       	ldi	r24, 0x6F	; 111
 280:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
					UART_Transmit('d'); UART_Transmit('e'); UART_Transmit('\n');
 284:	84 e6       	ldi	r24, 0x64	; 100
 286:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 28a:	85 e6       	ldi	r24, 0x65	; 101
 28c:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
 290:	8a e0       	ldi	r24, 0x0A	; 10
 292:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Transmit>
				show_on_leds(received);
				UART_Transmit(received); // Eco
				
				// Si se recibe 'T' cambiar a modo transmisión
				if (received == 'T' || received == 't') {
					mode = 0;
 296:	d0 e0       	ldi	r29, 0x00	; 0
 298:	20 cf       	rjmp	.-448    	; 0xda <main+0x16>

0000029a <_exit>:
 29a:	f8 94       	cli

0000029c <__stop_program>:
 29c:	ff cf       	rjmp	.-2      	; 0x29c <__stop_program>
