
Laboratorio6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010c  00800100  0000028e  00000302  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000028e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000040e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b69  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000776  00000000  00000000  00001049  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000453  00000000  00000000  000017bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001c14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000454  00000000  00000000  00001cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b5  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000023dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  8e:	0c 94 45 01 	jmp	0x28a	; 0x28a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_Init>:
void display_menu(void);
void my_itoa(uint16_t value, char* buffer, uint8_t base); //Función itoa

// Inicialización UART
void UART_Init(unsigned int ubrr) {
    UBRR0H = (unsigned char)(ubrr >> 8);
  96:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (unsigned char)ubrr;
  9a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UCSR0B = (1 << TXEN0) | (1 << RXEN0);
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  aa:	08 95       	ret

000000ac <cadena>:
}

// Función optimizada para enviar cadenas
void cadena(const char txt[]) {
  ac:	fc 01       	movw	r30, r24
    while(*txt != '\0') {
  ae:	07 c0       	rjmp	.+14     	; 0xbe <cadena+0x12>
        while(!(UCSR0A & (1 << UDRE0))); // Esperar buffer vacío
  b0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b4:	95 ff       	sbrs	r25, 5
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <cadena+0x4>
        UDR0 = *txt++;
  b8:	31 96       	adiw	r30, 0x01	; 1
  ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

// Función optimizada para enviar cadenas
void cadena(const char txt[]) {
    while(*txt != '\0') {
  be:	80 81       	ld	r24, Z
  c0:	81 11       	cpse	r24, r1
  c2:	f6 cf       	rjmp	.-20     	; 0xb0 <cadena+0x4>
        while(!(UCSR0A & (1 << UDRE0))); // Esperar buffer vacío
        UDR0 = *txt++;
    }
}
  c4:	08 95       	ret

000000c6 <UART_Transmit>:

// Transmitir un carácter
void UART_Transmit(unsigned char data) {
    while(!(UCSR0A & (1 << UDRE0)));
  c6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ca:	95 ff       	sbrs	r25, 5
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <UART_Transmit>
    UDR0 = data;
  ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d2:	08 95       	ret

000000d4 <UART_Receive>:
}

// Recibir un carácter
unsigned char UART_Receive(void) {
    while(!(UCSR0A & (1 << RXC0)));
  d4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d8:	88 23       	and	r24, r24
  da:	e4 f7       	brge	.-8      	; 0xd4 <UART_Receive>
    return UDR0;
  dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  e0:	08 95       	ret

000000e2 <show_on_leds>:

// Mostrar valor en LEDs (B0-B5 y D6-D7)
void show_on_leds(unsigned char value) {
    PORTB = value & LED_PORTB_MASK;
  e2:	98 2f       	mov	r25, r24
  e4:	9f 73       	andi	r25, 0x3F	; 63
  e6:	95 b9       	out	0x05, r25	; 5
    PORTD = (PORTD & ~LED_PORTD_MASK) | (value & LED_PORTD_MASK);
  e8:	9b b1       	in	r25, 0x0b	; 11
  ea:	9f 73       	andi	r25, 0x3F	; 63
  ec:	80 7c       	andi	r24, 0xC0	; 192
  ee:	89 2b       	or	r24, r25
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	08 95       	ret

000000f4 <read_potentiometer>:
}

// Leer potenciómetro en A0
uint16_t read_potentiometer(void) {
	ADMUX = (1 << REFS0) | (0 << MUX0); // Configura AVcc como referencia y ADC0 (A0)
  f4:	80 e4       	ldi	r24, 0x40	; 64
  f6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Iniciar conversión
  fa:	87 ec       	ldi	r24, 0xC7	; 199
  fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	while(ADCSRA & (1 << ADSC)); // Esperar conversión
 100:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 104:	86 fd       	sbrc	r24, 6
 106:	fc cf       	rjmp	.-8      	; 0x100 <read_potentiometer+0xc>
	return ADC; // Retornar valor entre 0 - 1023
 108:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 10c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 110:	08 95       	ret

00000112 <display_menu>:

// Mostrar Menú
void display_menu(void) {
	cadena("\r\n=== MENU PRINCIPAL ===");
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 56 00 	call	0xac	; 0xac <cadena>
	cadena("\r\n1. Leer Potenciometro (A0)");
 11a:	89 e1       	ldi	r24, 0x19	; 25
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 56 00 	call	0xac	; 0xac <cadena>
	cadena("\r\n2. Enviar Caracter ASCII");
 122:	86 e3       	ldi	r24, 0x36	; 54
 124:	91 e0       	ldi	r25, 0x01	; 1
 126:	0e 94 56 00 	call	0xac	; 0xac <cadena>
	cadena("\r\nSeleccione opción (1-2): ");
 12a:	81 e5       	ldi	r24, 0x51	; 81
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 56 00 	call	0xac	; 0xac <cadena>
 132:	08 95       	ret

00000134 <my_itoa>:
}

// Función itoa
void my_itoa(uint16_t value, char* buffer, uint8_t base) {
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	eb 01       	movw	r28, r22
	char* p = buffer;
 13a:	fb 01       	movw	r30, r22
 13c:	01 c0       	rjmp	.+2      	; 0x140 <my_itoa+0xc>
	uint16_t shifter = value;
	
	do {
		*p++ = "0123456789ABCDEF"[shifter % base];
 13e:	f9 01       	movw	r30, r18
 140:	9f 01       	movw	r18, r30
 142:	2f 5f       	subi	r18, 0xFF	; 255
 144:	3f 4f       	sbci	r19, 0xFF	; 255
 146:	64 2f       	mov	r22, r20
 148:	70 e0       	ldi	r23, 0x00	; 0
 14a:	0e 94 31 01 	call	0x262	; 0x262 <__udivmodhi4>
 14e:	dc 01       	movw	r26, r24
 150:	a3 59       	subi	r26, 0x93	; 147
 152:	be 4f       	sbci	r27, 0xFE	; 254
 154:	8c 91       	ld	r24, X
 156:	80 83       	st	Z, r24
		shifter /= base;
 158:	86 2f       	mov	r24, r22
 15a:	97 2f       	mov	r25, r23
	} while(shifter);
 15c:	00 97       	sbiw	r24, 0x00	; 0
 15e:	79 f7       	brne	.-34     	; 0x13e <my_itoa+0xa>
	
	*p = '\0';
 160:	11 82       	std	Z+1, r1	; 0x01
	
	// Invertir la cadena
	char *start = buffer, *end = p-1;
	while(start < end) {
 162:	07 c0       	rjmp	.+14     	; 0x172 <my_itoa+0x3e>
		char temp = *start;
 164:	de 01       	movw	r26, r28
 166:	8d 91       	ld	r24, X+
		*start++ = *end;
 168:	90 81       	ld	r25, Z
 16a:	98 83       	st	Y, r25
		*end-- = temp;
 16c:	80 83       	st	Z, r24
 16e:	31 97       	sbiw	r30, 0x01	; 1
	
	// Invertir la cadena
	char *start = buffer, *end = p-1;
	while(start < end) {
		char temp = *start;
		*start++ = *end;
 170:	ed 01       	movw	r28, r26
	
	*p = '\0';
	
	// Invertir la cadena
	char *start = buffer, *end = p-1;
	while(start < end) {
 172:	ce 17       	cp	r28, r30
 174:	df 07       	cpc	r29, r31
 176:	b0 f3       	brcs	.-20     	; 0x164 <my_itoa+0x30>
		char temp = *start;
		*start++ = *end;
		*end-- = temp;
	}
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <main>:

int main(void) {
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	2a 97       	sbiw	r28, 0x0a	; 10
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	f8 94       	cli
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	0f be       	out	0x3f, r0	; 63
 190:	cd bf       	out	0x3d, r28	; 61
    // Inicializar UART
    UART_Init(MYUBRR);
 192:	87 e6       	ldi	r24, 0x67	; 103
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Init>
    
    // Configurar LEDs
    DDRB = LED_PORTB_MASK;
 19a:	8f e3       	ldi	r24, 0x3F	; 63
 19c:	84 b9       	out	0x04, r24	; 4
    DDRD |= LED_PORTD_MASK;
 19e:	8a b1       	in	r24, 0x0a	; 10
 1a0:	80 6c       	ori	r24, 0xC0	; 192
 1a2:	8a b9       	out	0x0a, r24	; 10
    
    // Configurar ADC
    ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 1a4:	87 e8       	ldi	r24, 0x87	; 135
 1a6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    
    // Mensaje inicial
    cadena("\r\nSistema UART con menu interactivo\r\n");
 1aa:	8e e7       	ldi	r24, 0x7E	; 126
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 56 00 	call	0xac	; 0xac <cadena>
        
    while(1) {
	    display_menu();
 1b2:	0e 94 89 00 	call	0x112	; 0x112 <display_menu>
	    
	    unsigned char option = UART_Receive();
 1b6:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_Receive>
 1ba:	18 2f       	mov	r17, r24
	    UART_Transmit(option); // Eco
 1bc:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_Transmit>
	    
	    switch(option) {
 1c0:	11 33       	cpi	r17, 0x31	; 49
 1c2:	19 f0       	breq	.+6      	; 0x1ca <main+0x4c>
 1c4:	12 33       	cpi	r17, 0x32	; 50
 1c6:	c9 f0       	breq	.+50     	; 0x1fa <main+0x7c>
 1c8:	3e c0       	rjmp	.+124    	; 0x246 <main+0xc8>
		    case '1': {
			    uint16_t pot_value = read_potentiometer();
 1ca:	0e 94 7a 00 	call	0xf4	; 0xf4 <read_potentiometer>
 1ce:	18 2f       	mov	r17, r24
 1d0:	09 2f       	mov	r16, r25
			    cadena("\r\nValor potenciometro: ");
 1d2:	84 ea       	ldi	r24, 0xA4	; 164
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 56 00 	call	0xac	; 0xac <cadena>
			    
			    // Convertir valor a ASCII y enviar
			    char buffer[10];
			    my_itoa(pot_value, buffer, 10);
 1da:	4a e0       	ldi	r20, 0x0A	; 10
 1dc:	be 01       	movw	r22, r28
 1de:	6f 5f       	subi	r22, 0xFF	; 255
 1e0:	7f 4f       	sbci	r23, 0xFF	; 255
 1e2:	81 2f       	mov	r24, r17
 1e4:	90 2f       	mov	r25, r16
 1e6:	0e 94 9a 00 	call	0x134	; 0x134 <my_itoa>
			    cadena(buffer);
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	0e 94 56 00 	call	0xac	; 0xac <cadena>
			    
			    // Mostrar en LEDs (solo bits bajos)
			    show_on_leds(pot_value & 0xFF);
 1f2:	81 2f       	mov	r24, r17
 1f4:	0e 94 71 00 	call	0xe2	; 0xe2 <show_on_leds>
 1f8:	2a c0       	rjmp	.+84     	; 0x24e <main+0xd0>
			    break;
		    }
			
			case '2': {
				cadena("\r\nIngrese caracter ASCII: ");
 1fa:	8c eb       	ldi	r24, 0xBC	; 188
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 56 00 	call	0xac	; 0xac <cadena>
				unsigned char ascii_char = UART_Receive();
 202:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_Receive>
 206:	18 2f       	mov	r17, r24
				
				cadena("\r\nCaracter enviado: ");
 208:	87 ed       	ldi	r24, 0xD7	; 215
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	0e 94 56 00 	call	0xac	; 0xac <cadena>
				UART_Transmit(ascii_char);
 210:	81 2f       	mov	r24, r17
 212:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_Transmit>
				cadena(" (Decimal: ");
 216:	8c ee       	ldi	r24, 0xEC	; 236
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	0e 94 56 00 	call	0xac	; 0xac <cadena>
				
				// Mostrar valor decimal
				char dec_buffer[4];
				my_itoa(ascii_char, dec_buffer, 10);
 21e:	4a e0       	ldi	r20, 0x0A	; 10
 220:	be 01       	movw	r22, r28
 222:	6f 5f       	subi	r22, 0xFF	; 255
 224:	7f 4f       	sbci	r23, 0xFF	; 255
 226:	81 2f       	mov	r24, r17
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 9a 00 	call	0x134	; 0x134 <my_itoa>
				cadena(dec_buffer);
 22e:	ce 01       	movw	r24, r28
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	0e 94 56 00 	call	0xac	; 0xac <cadena>
				cadena(")");
 236:	84 e3       	ldi	r24, 0x34	; 52
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	0e 94 56 00 	call	0xac	; 0xac <cadena>
				
				// Mostrar en LEDs
				show_on_leds(ascii_char);
 23e:	81 2f       	mov	r24, r17
 240:	0e 94 71 00 	call	0xe2	; 0xe2 <show_on_leds>
 244:	04 c0       	rjmp	.+8      	; 0x24e <main+0xd0>
				break;
			}
			default:
				cadena("\r\nOpcion no valida!");
 246:	88 ef       	ldi	r24, 0xF8	; 248
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 56 00 	call	0xac	; 0xac <cadena>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	81 ee       	ldi	r24, 0xE1	; 225
 252:	94 e0       	ldi	r25, 0x04	; 4
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <main+0xd6>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0xe0>
 25e:	00 00       	nop
 260:	a8 cf       	rjmp	.-176    	; 0x1b2 <main+0x34>

00000262 <__udivmodhi4>:
 262:	aa 1b       	sub	r26, r26
 264:	bb 1b       	sub	r27, r27
 266:	51 e1       	ldi	r21, 0x11	; 17
 268:	07 c0       	rjmp	.+14     	; 0x278 <__udivmodhi4_ep>

0000026a <__udivmodhi4_loop>:
 26a:	aa 1f       	adc	r26, r26
 26c:	bb 1f       	adc	r27, r27
 26e:	a6 17       	cp	r26, r22
 270:	b7 07       	cpc	r27, r23
 272:	10 f0       	brcs	.+4      	; 0x278 <__udivmodhi4_ep>
 274:	a6 1b       	sub	r26, r22
 276:	b7 0b       	sbc	r27, r23

00000278 <__udivmodhi4_ep>:
 278:	88 1f       	adc	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	5a 95       	dec	r21
 27e:	a9 f7       	brne	.-22     	; 0x26a <__udivmodhi4_loop>
 280:	80 95       	com	r24
 282:	90 95       	com	r25
 284:	bc 01       	movw	r22, r24
 286:	cd 01       	movw	r24, r26
 288:	08 95       	ret

0000028a <_exit>:
 28a:	f8 94       	cli

0000028c <__stop_program>:
 28c:	ff cf       	rjmp	.-2      	; 0x28c <__stop_program>
