
Laboratorio6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007e  00800100  000001da  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080017e  0080017e  000002ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000035c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008cd  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073e  00000000  00000000  00000c69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000351  00000000  00000000  000013a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  000016f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f8  00000000  00000000  0000178c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000186  00000000  00000000  00001b84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001d0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 37       	cpi	r26, 0x7E	; 126
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e7       	ldi	r26, 0x7E	; 126
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 38       	cpi	r26, 0x80	; 128
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a4 00 	call	0x148	; 0x148 <main>
  9e:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <UART_init>:
void enviar_cadena(char txt[]);

// Inicialización UART
void UART_init(unsigned int ubrr) {
    // Configurar baud rate
	UBRR0H = (unsigned char)(ubrr >> 8);
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// Habilitar transmisor, receptor e interrupción por recepción
	UCSR0B = (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);
  ae:	88 e9       	ldi	r24, 0x98	; 152
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Configurar formato: 8 bits de datos, 1 bit de parada
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  b4:	86 e0       	ldi	r24, 0x06	; 6
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  ba:	08 95       	ret

000000bc <UART_Transmit>:
}

// Enviar un caracter
void UART_Transmit(unsigned char data) {
	while (!(UCSR0A & (1 << UDRE0)));  // Espera a que el buffer esté vacío
  bc:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c0:	95 ff       	sbrs	r25, 5
  c2:	fc cf       	rjmp	.-8      	; 0xbc <UART_Transmit>
	UDR0 = data;
  c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c8:	08 95       	ret

000000ca <enviar_cadena>:
}

// Función para enviar cadenas (Parte 1)
void enviar_cadena(char txt[]) {
  ca:	0f 93       	push	r16
  cc:	1f 93       	push	r17
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	8c 01       	movw	r16, r24
	int i = 0;
  d4:	c0 e0       	ldi	r28, 0x00	; 0
  d6:	d0 e0       	ldi	r29, 0x00	; 0
	while (txt[i] != '\0') {
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <enviar_cadena+0x16>
		UART_Transmit(txt[i]);
  da:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
		i++;
  de:	21 96       	adiw	r28, 0x01	; 1
}

// Función para enviar cadenas (Parte 1)
void enviar_cadena(char txt[]) {
	int i = 0;
	while (txt[i] != '\0') {
  e0:	f8 01       	movw	r30, r16
  e2:	ec 0f       	add	r30, r28
  e4:	fd 1f       	adc	r31, r29
  e6:	80 81       	ld	r24, Z
  e8:	81 11       	cpse	r24, r1
  ea:	f7 cf       	rjmp	.-18     	; 0xda <enviar_cadena+0x10>
		UART_Transmit(txt[i]);
		i++;
	}
}
  ec:	df 91       	pop	r29
  ee:	cf 91       	pop	r28
  f0:	1f 91       	pop	r17
  f2:	0f 91       	pop	r16
  f4:	08 95       	ret

000000f6 <__vector_18>:

// Rutina de interrupción por recepción UART (Parte 2)
ISR(USART_RX_vect) {
  f6:	1f 92       	push	r1
  f8:	0f 92       	push	r0
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	0f 92       	push	r0
  fe:	11 24       	eor	r1, r1
 100:	2f 93       	push	r18
 102:	8f 93       	push	r24
 104:	9f 93       	push	r25
	received_char = UDR0; // Leer dato recibido
 106:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 10a:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <received_char>
	new_data_flag = 1;    // Activar flag
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <__data_end>
	
	// Mostrar en LEDs inmediatamente
	PORTB = received_char & 0x3F;       // B0-B5 (6 bits menos significativos)
 114:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <received_char>
 118:	8f 73       	andi	r24, 0x3F	; 63
 11a:	85 b9       	out	0x05, r24	; 5
	PORTD = (PORTD & 0x3F) | ((received_char << 2) & 0xC0); // D6-D7 (bits 6 y 7)
 11c:	2b b1       	in	r18, 0x0b	; 11
 11e:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <received_char>
 122:	89 2f       	mov	r24, r25
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	92 2f       	mov	r25, r18
 130:	9f 73       	andi	r25, 0x3F	; 63
 132:	80 7c       	andi	r24, 0xC0	; 192
 134:	89 2b       	or	r24, r25
 136:	8b b9       	out	0x0b, r24	; 11
}
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	2f 91       	pop	r18
 13e:	0f 90       	pop	r0
 140:	0f be       	out	0x3f, r0	; 63
 142:	0f 90       	pop	r0
 144:	1f 90       	pop	r1
 146:	18 95       	reti

00000148 <main>:

int main(void) {
	// Inicializar UART
	UART_init(MYUBRR);
 148:	87 e6       	ldi	r24, 0x67	; 103
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 53 00 	call	0xa6	; 0xa6 <UART_init>
	
	// Configurar LEDs
	DDRB = 0x3F;    // B0-B5 como salidas
 150:	8f e3       	ldi	r24, 0x3F	; 63
 152:	84 b9       	out	0x04, r24	; 4
	DDRD |= (1 << PD6) | (1 << PD7); // D6 y D7 como salidas
 154:	8a b1       	in	r24, 0x0a	; 10
 156:	80 6c       	ori	r24, 0xC0	; 192
 158:	8a b9       	out	0x0a, r24	; 10
	
	// Habilitar interrupciones globales
	sei();
 15a:	78 94       	sei
	
	// Mensaje inicial
	enviar_cadena("Sistema UART listo\r\n");
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 65 00 	call	0xca	; 0xca <enviar_cadena>
	enviar_cadena("Parte 1: Envio automatico activo\r\n");
 164:	85 e1       	ldi	r24, 0x15	; 21
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 65 00 	call	0xca	; 0xca <enviar_cadena>
	enviar_cadena("Parte 2: Recepcion por interrupcion activa\r\n");
 16c:	88 e3       	ldi	r24, 0x38	; 56
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 65 00 	call	0xca	; 0xca <enviar_cadena>
	
	unsigned char counter = 0;
 174:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1) {
		// Parte 1: Envío periódico de caracteres
		UART_Transmit('A' + (counter % 26)); // Envia letras de la A a la Z
 176:	8f e4       	ldi	r24, 0x4F	; 79
 178:	d8 9f       	mul	r29, r24
 17a:	81 2d       	mov	r24, r1
 17c:	11 24       	eor	r1, r1
 17e:	86 95       	lsr	r24
 180:	86 95       	lsr	r24
 182:	86 95       	lsr	r24
 184:	cd 2f       	mov	r28, r29
 186:	2a e1       	ldi	r18, 0x1A	; 26
 188:	82 9f       	mul	r24, r18
 18a:	c0 19       	sub	r28, r0
 18c:	11 24       	eor	r1, r1
 18e:	cf 5b       	subi	r28, 0xBF	; 191
 190:	8c 2f       	mov	r24, r28
 192:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
		enviar_cadena("\r\nEnviado: ");
 196:	85 e6       	ldi	r24, 0x65	; 101
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 65 00 	call	0xca	; 0xca <enviar_cadena>
		UART_Transmit('A' + (counter % 26));
 19e:	8c 2f       	mov	r24, r28
 1a0:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
		
		// Parte 2: Si se recibió nuevo dato, mostrar eco
		if(new_data_flag) {
 1a4:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <__data_end>
 1a8:	88 23       	and	r24, r24
 1aa:	51 f0       	breq	.+20     	; 0x1c0 <main+0x78>
			enviar_cadena("\r\nRecibido: ");
 1ac:	81 e7       	ldi	r24, 0x71	; 113
 1ae:	91 e0       	ldi	r25, 0x01	; 1
 1b0:	0e 94 65 00 	call	0xca	; 0xca <enviar_cadena>
			UART_Transmit(received_char);
 1b4:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <received_char>
 1b8:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_Transmit>
			new_data_flag = 0; // Resetear flag
 1bc:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	93 ed       	ldi	r25, 0xD3	; 211
 1c4:	20 e3       	ldi	r18, 0x30	; 48
 1c6:	81 50       	subi	r24, 0x01	; 1
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	20 40       	sbci	r18, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0x7e>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0x88>
 1d0:	00 00       	nop
		}
		
		_delay_ms(1000);
		counter++;
 1d2:	df 5f       	subi	r29, 0xFF	; 255
	}
 1d4:	d0 cf       	rjmp	.-96     	; 0x176 <main+0x2e>

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
