
Laboratorio6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800100  000001cc  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098c  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000729  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b1  00000000  00000000  000014ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f7  00000000  00000000  00001914  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000124  00000000  00000000  00001d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001e2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 33       	cpi	r26, 0x3E	; 62
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  8e:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART_Init>:
unsigned char UART_Receive(void);
void show_on_leds(unsigned char value);

// Inicialización UART
void UART_Init(unsigned int ubrr) {
    UBRR0H = (unsigned char)(ubrr >> 8);
  96:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (unsigned char)ubrr;
  9a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UCSR0B = (1 << TXEN0) | (1 << RXEN0);
  9e:	88 e1       	ldi	r24, 0x18	; 24
  a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  a4:	86 e0       	ldi	r24, 0x06	; 6
  a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  aa:	08 95       	ret

000000ac <cadena>:
}

// Función optimizada para enviar cadenas
void cadena(const char txt[]) {
  ac:	fc 01       	movw	r30, r24
    while(*txt != '\0') {
  ae:	07 c0       	rjmp	.+14     	; 0xbe <cadena+0x12>
        while(!(UCSR0A & (1 << UDRE0))); // Esperar buffer vacío
  b0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b4:	95 ff       	sbrs	r25, 5
  b6:	fc cf       	rjmp	.-8      	; 0xb0 <cadena+0x4>
        UDR0 = *txt++;
  b8:	31 96       	adiw	r30, 0x01	; 1
  ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

// Función optimizada para enviar cadenas
void cadena(const char txt[]) {
    while(*txt != '\0') {
  be:	80 81       	ld	r24, Z
  c0:	81 11       	cpse	r24, r1
  c2:	f6 cf       	rjmp	.-20     	; 0xb0 <cadena+0x4>
        while(!(UCSR0A & (1 << UDRE0))); // Esperar buffer vacío
        UDR0 = *txt++;
    }
}
  c4:	08 95       	ret

000000c6 <UART_Transmit>:

// Transmitir un carácter
void UART_Transmit(unsigned char data) {
    while(!(UCSR0A & (1 << UDRE0)));
  c6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ca:	95 ff       	sbrs	r25, 5
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <UART_Transmit>
    UDR0 = data;
  ce:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  d2:	08 95       	ret

000000d4 <UART_Receive>:
}

// Recibir un carácter
unsigned char UART_Receive(void) {
    while(!(UCSR0A & (1 << RXC0)));
  d4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d8:	88 23       	and	r24, r24
  da:	e4 f7       	brge	.-8      	; 0xd4 <UART_Receive>
    return UDR0;
  dc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  e0:	08 95       	ret

000000e2 <show_on_leds>:

// Mostrar valor en LEDs (B0-B5 y D6-D7)
void show_on_leds(unsigned char value) {
    PORTB = value & LED_PORTB_MASK;
  e2:	98 2f       	mov	r25, r24
  e4:	9f 73       	andi	r25, 0x3F	; 63
  e6:	95 b9       	out	0x05, r25	; 5
    PORTD = (PORTD & ~LED_PORTD_MASK) | (value & LED_PORTD_MASK);
  e8:	9b b1       	in	r25, 0x0b	; 11
  ea:	9f 73       	andi	r25, 0x3F	; 63
  ec:	80 7c       	andi	r24, 0xC0	; 192
  ee:	89 2b       	or	r24, r25
  f0:	8b b9       	out	0x0b, r24	; 11
  f2:	08 95       	ret

000000f4 <main>:
}

int main(void) {
    // Inicializar UART
    UART_Init(MYUBRR);
  f4:	87 e6       	ldi	r24, 0x67	; 103
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	0e 94 4b 00 	call	0x96	; 0x96 <UART_Init>
    
    // Configurar LEDs
    DDRB = LED_PORTB_MASK;
  fc:	8f e3       	ldi	r24, 0x3F	; 63
  fe:	84 b9       	out	0x04, r24	; 4
    DDRD |= LED_PORTD_MASK;
 100:	8a b1       	in	r24, 0x0a	; 10
 102:	80 6c       	ori	r24, 0xC0	; 192
 104:	8a b9       	out	0x0a, r24	; 10
    
    // Mensaje inicial
    cadena("\r\nSistema UART inicializado\r\n");
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	0e 94 56 00 	call	0xac	; 0xac <cadena>
    cadena("Modo Transmision: Enviando A-Z\r\n");
 10e:	8e e1       	ldi	r24, 0x1E	; 30
 110:	91 e0       	ldi	r25, 0x01	; 1
 112:	0e 94 56 00 	call	0xac	; 0xac <cadena>
    cadena("Envie cualquier caracter para cambiar a Recepcion\r\n");
 116:	8f e3       	ldi	r24, 0x3F	; 63
 118:	91 e0       	ldi	r25, 0x01	; 1
 11a:	0e 94 56 00 	call	0xac	; 0xac <cadena>
    cadena("Envie 'T' para volver a Transmision\r\n\r\n");
 11e:	83 e7       	ldi	r24, 0x73	; 115
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 56 00 	call	0xac	; 0xac <cadena>
    
    unsigned char mode = 0; // 0 = Transmisión, 1 = Recepción
    unsigned char counter = 0;
 126:	c0 e0       	ldi	r28, 0x00	; 0
    cadena("\r\nSistema UART inicializado\r\n");
    cadena("Modo Transmision: Enviando A-Z\r\n");
    cadena("Envie cualquier caracter para cambiar a Recepcion\r\n");
    cadena("Envie 'T' para volver a Transmision\r\n\r\n");
    
    unsigned char mode = 0; // 0 = Transmisión, 1 = Recepción
 128:	d0 e0       	ldi	r29, 0x00	; 0
    unsigned char counter = 0;
    
    while(1) {
        if(mode == 0) {
 12a:	d1 11       	cpse	r29, r1
 12c:	31 c0       	rjmp	.+98     	; 0x190 <main+0x9c>
            // Parte 1: Transmitir carácter y mostrar contador en LEDs
            UART_Transmit('A' + (counter % 26));
 12e:	8f e4       	ldi	r24, 0x4F	; 79
 130:	c8 9f       	mul	r28, r24
 132:	81 2d       	mov	r24, r1
 134:	11 24       	eor	r1, r1
 136:	86 95       	lsr	r24
 138:	86 95       	lsr	r24
 13a:	86 95       	lsr	r24
 13c:	9c 2f       	mov	r25, r28
 13e:	2a e1       	ldi	r18, 0x1A	; 26
 140:	82 9f       	mul	r24, r18
 142:	90 19       	sub	r25, r0
 144:	11 24       	eor	r1, r1
 146:	89 2f       	mov	r24, r25
 148:	8f 5b       	subi	r24, 0xBF	; 191
 14a:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_Transmit>
            show_on_leds(counter);
 14e:	8c 2f       	mov	r24, r28
 150:	0e 94 71 00 	call	0xe2	; 0xe2 <show_on_leds>
            counter++;
 154:	cf 5f       	subi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	89 e6       	ldi	r24, 0x69	; 105
 15a:	98 e1       	ldi	r25, 0x18	; 24
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x68>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x72>
 166:	00 00       	nop
            
            _delay_ms(500);
            
            // Verificar si se recibió un carácter para cambiar de modo
            if(UCSR0A & (1 << RXC0)) {
 168:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 16c:	88 23       	and	r24, r24
 16e:	ec f6       	brge	.-70     	; 0x12a <main+0x36>
                UART_Receive(); // Limpiar buffer
 170:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_Receive>
                mode = 1;
                cadena("\r\nModo Recepcion activo\r\n");
 174:	8b e9       	ldi	r24, 0x9B	; 155
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	0e 94 56 00 	call	0xac	; 0xac <cadena>
                cadena("LEDs muestran caracteres recibidos\r\n");
 17c:	85 eb       	ldi	r24, 0xB5	; 181
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 56 00 	call	0xac	; 0xac <cadena>
                cadena("Presione 'T' para volver a Transmision\r\n\r\n");
 184:	8a ed       	ldi	r24, 0xDA	; 218
 186:	91 e0       	ldi	r25, 0x01	; 1
 188:	0e 94 56 00 	call	0xac	; 0xac <cadena>
            _delay_ms(500);
            
            // Verificar si se recibió un carácter para cambiar de modo
            if(UCSR0A & (1 << RXC0)) {
                UART_Receive(); // Limpiar buffer
                mode = 1;
 18c:	d1 e0       	ldi	r29, 0x01	; 1
 18e:	cd cf       	rjmp	.-102    	; 0x12a <main+0x36>
                cadena("Presione 'T' para volver a Transmision\r\n\r\n");
            }
        } 
        else {
            // Parte 2: Recibir carácter y mostrar en LEDs
            if(UCSR0A & (1 << RXC0)) {
 190:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 194:	88 23       	and	r24, r24
 196:	4c f6       	brge	.-110    	; 0x12a <main+0x36>
                unsigned char received = UART_Receive();
 198:	0e 94 6a 00 	call	0xd4	; 0xd4 <UART_Receive>
 19c:	18 2f       	mov	r17, r24
                show_on_leds(received);
 19e:	0e 94 71 00 	call	0xe2	; 0xe2 <show_on_leds>
                UART_Transmit(received); // Eco
 1a2:	81 2f       	mov	r24, r17
 1a4:	0e 94 63 00 	call	0xc6	; 0xc6 <UART_Transmit>
                
                // Cambiar a modo transmisión si se recibe 'T' o 't'
                if(received == 'T' || received == 't') {
 1a8:	14 35       	cpi	r17, 0x54	; 84
 1aa:	19 f0       	breq	.+6      	; 0x1b2 <main+0xbe>
 1ac:	14 37       	cpi	r17, 0x74	; 116
 1ae:	09 f0       	breq	.+2      	; 0x1b2 <main+0xbe>
 1b0:	bc cf       	rjmp	.-136    	; 0x12a <main+0x36>
                    mode = 0;
                    counter = 0; // Reiniciar contador
                    cadena("\r\nModo Transmision activo\r\n");
 1b2:	85 e0       	ldi	r24, 0x05	; 5
 1b4:	92 e0       	ldi	r25, 0x02	; 2
 1b6:	0e 94 56 00 	call	0xac	; 0xac <cadena>
                    cadena("Enviando A-Z cada 500ms\r\n\r\n");
 1ba:	81 e2       	ldi	r24, 0x21	; 33
 1bc:	92 e0       	ldi	r25, 0x02	; 2
 1be:	0e 94 56 00 	call	0xac	; 0xac <cadena>
                UART_Transmit(received); // Eco
                
                // Cambiar a modo transmisión si se recibe 'T' o 't'
                if(received == 'T' || received == 't') {
                    mode = 0;
                    counter = 0; // Reiniciar contador
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
                show_on_leds(received);
                UART_Transmit(received); // Eco
                
                // Cambiar a modo transmisión si se recibe 'T' o 't'
                if(received == 'T' || received == 't') {
                    mode = 0;
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
 1c6:	b1 cf       	rjmp	.-158    	; 0x12a <main+0x36>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
